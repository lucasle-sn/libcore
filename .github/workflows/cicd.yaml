name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-type: [debug, release]
    name: Build and Test ${{ matrix.build-type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: true

      - name: Install dependencies
        run: sudo apt-get install -y g++ cmake build-essential checkinstall zlib1g-dev libssl-dev doxygen graphviz

      - name: Build
        run: |
          if [ "${{matrix.build-type}}" == "debug" ]; then
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug && cmake --build build -j10
          else
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release && cmake --build build -j10
          fi

      - name: Test
        run: cd build && ctest -j8 -T test --no-compress-output

      - name: doxygen
        run: cmake --build build --target doxygen -- --no-print-directory

  sonar-cloud:
    name: Build and analyze
    runs-on: ubuntu-latest
    needs: [build-linux]
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: sudo apt-get install -y g++ cmake build-essential checkinstall zlib1g-dev libssl-dev
        uses: SonarSource/sonarcloud-github-c-cpp@v2

      - name: Run build-wrapper
        run: |
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }}
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug && cmake --build build -j10

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json"
