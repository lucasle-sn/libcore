name: Sonarcloud Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'

env:
  BUILD_DEPENDENCIES: g++ cmake build-essential checkinstall zlib1g-dev libssl-dev
  BUILD_DIRECTORY: build

jobs:
  sonar-cloud:
    name: Sonarcloud Analysis
    runs-on: ubuntu-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: sudo apt-get install -y ${{ env.BUILD_DEPENDENCIES }}

      - name: Install Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install gcovr
        run: |
          pip install gcovr==5.0 # 5.1 is not supported

      - name: Install sonar-scanner & build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v2

      - name: Run build-wrapper
        run: |
          cmake -S . -B ${{ env.BUILD_DIRECTORY }} -DCODE_COVERAGE=ON -DCMAKE_C_FLAGS=--coverage -DCMAKE_CXX_FLAGS=--coverage
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build ${{ env.BUILD_DIRECTORY }} -j10

      - name: Generate coverage information
        run: |
          # Run tests to generate coverage information
          cd ${{ env.BUILD_DIRECTORY }} && ctest -j8 -T test --no-compress-output
          gcovr -r .. --sonarqube -o coverage.xml --exclude '../third_party/.*'

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=lucasle-sn_projects-cpp \
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }} \
            -Dsonar.projectName=projects-cpp \
            -Dsonar.projectVersion=1.0 \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json" \
            -Dsonar.coverageReportPaths=${{ env.BUILD_DIRECTORY }}/coverage.xml \
            -Dsonar.sources=./ \
            -Dsonar.tests=./ \
            -Dsonar.test.inclusions=**/test/**/* \
            -Dsonar.exclusions=**/test/**/*
